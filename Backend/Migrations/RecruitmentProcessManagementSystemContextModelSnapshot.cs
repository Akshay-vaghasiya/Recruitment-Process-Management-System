// <auto-generated />
using System;
using Backend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(RecruitmentProcessManagementSystemContext))]
    partial class RecruitmentProcessManagementSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Models.ApplicationStatus", b =>
                {
                    b.Property<int>("PkApplicationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_application_status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkApplicationStatusId"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("PkApplicationStatusId")
                        .HasName("PK__applicat__1B80B3DA4A1806EA");

                    b.ToTable("application_status", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Candidate", b =>
                {
                    b.Property<int>("PkCandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_candidate_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkCandidateId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.Property<string>("ResumeUrl")
                        .HasColumnType("text")
                        .HasColumnName("resume_url");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("YearsOfExperience")
                        .HasColumnType("int")
                        .HasColumnName("years_of_experience");

                    b.HasKey("PkCandidateId")
                        .HasName("PK__candidat__D43BFB2A752C6A10");

                    b.HasIndex(new[] { "Email" }, "UQ__candidat__AB6E61649995AF39")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.ToTable("candidate", (string)null);
                });

            modelBuilder.Entity("Backend.Models.CandidateSkill", b =>
                {
                    b.Property<int>("PkCandidateSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_candidate_skill_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkCandidateSkillId"));

                    b.Property<int?>("FkCandidateId")
                        .HasColumnType("int")
                        .HasColumnName("fk_candidate_id");

                    b.Property<int?>("FkSkillId")
                        .HasColumnType("int")
                        .HasColumnName("fk_skill_id");

                    b.Property<int?>("YearsOfExperience")
                        .HasColumnType("int")
                        .HasColumnName("years_of_experience");

                    b.HasKey("PkCandidateSkillId")
                        .HasName("PK__candidat__634633AC0E7AA1B1");

                    b.HasIndex("FkCandidateId");

                    b.HasIndex("FkSkillId");

                    b.ToTable("candidate_skill", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Document", b =>
                {
                    b.Property<int>("PkDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_document_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkDocumentId"));

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("text")
                        .HasColumnName("document_url");

                    b.Property<int?>("FkCandidateId")
                        .HasColumnType("int")
                        .HasColumnName("fk_candidate_id");

                    b.Property<int?>("FkDocumentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("fk_document_type_id");

                    b.Property<int?>("FkStatusId")
                        .HasColumnType("int")
                        .HasColumnName("fk_status_id");

                    b.HasKey("PkDocumentId")
                        .HasName("PK__document__0467181A1D43A66E");

                    b.HasIndex("FkCandidateId");

                    b.HasIndex("FkDocumentTypeId");

                    b.HasIndex("FkStatusId");

                    b.ToTable("document", (string)null);
                });

            modelBuilder.Entity("Backend.Models.DocumentStatus", b =>
                {
                    b.Property<int>("PkDocumentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_document_status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkDocumentStatusId"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("PkDocumentStatusId")
                        .HasName("PK__document__2BFB62BD36F8EBB1");

                    b.ToTable("document_status", (string)null);
                });

            modelBuilder.Entity("Backend.Models.DocumentType", b =>
                {
                    b.Property<int>("PkDocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_document_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkDocumentTypeId"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("PkDocumentTypeId")
                        .HasName("PK__document__123FA8468734685F");

                    b.ToTable("document_type", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Interview", b =>
                {
                    b.Property<int>("PkInterviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_interview_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkInterviewId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("FkCandidateId")
                        .HasColumnType("int")
                        .HasColumnName("fk_candidate_id");

                    b.Property<int?>("FkInterviewRoundId")
                        .HasColumnType("int")
                        .HasColumnName("fk_interview_round_id");

                    b.Property<int?>("FkJobPositionId")
                        .HasColumnType("int")
                        .HasColumnName("fk_job_position_id");

                    b.Property<int?>("FkStatusId")
                        .HasColumnType("int")
                        .HasColumnName("fk_status_id");

                    b.Property<int?>("RoundNumber")
                        .HasColumnType("int")
                        .HasColumnName("round_number");

                    b.Property<DateTime?>("ScheduledTime")
                        .HasColumnType("datetime")
                        .HasColumnName("scheduled_time");

                    b.HasKey("PkInterviewId")
                        .HasName("PK__intervie__4EF41A8FC3728FA5");

                    b.HasIndex("FkCandidateId");

                    b.HasIndex("FkInterviewRoundId");

                    b.HasIndex("FkJobPositionId");

                    b.HasIndex("FkStatusId");

                    b.ToTable("interview", (string)null);
                });

            modelBuilder.Entity("Backend.Models.InterviewFeedback", b =>
                {
                    b.Property<int>("PkInterviewFeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_interview_feedback_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkInterviewFeedbackId"));

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("FkInterviewId")
                        .HasColumnType("int")
                        .HasColumnName("fk_interview_id");

                    b.Property<int?>("FkInterviewerId")
                        .HasColumnType("int")
                        .HasColumnName("fk_interviewer_id");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.HasKey("PkInterviewFeedbackId")
                        .HasName("PK__intervie__4139B8F6915BB39C");

                    b.HasIndex("FkInterviewId");

                    b.HasIndex("FkInterviewerId");

                    b.ToTable("interview_feedback", (string)null);
                });

            modelBuilder.Entity("Backend.Models.InterviewPanel", b =>
                {
                    b.Property<int>("PkInterviewPanelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_interview_panel_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkInterviewPanelId"));

                    b.Property<int?>("FkInterviewId")
                        .HasColumnType("int")
                        .HasColumnName("fk_interview_id");

                    b.Property<int?>("FkInterviewerId")
                        .HasColumnType("int")
                        .HasColumnName("fk_interviewer_id");

                    b.HasKey("PkInterviewPanelId")
                        .HasName("PK__intervie__1295035212BE1CB7");

                    b.HasIndex("FkInterviewId");

                    b.HasIndex("FkInterviewerId");

                    b.ToTable("interview_panel", (string)null);
                });

            modelBuilder.Entity("Backend.Models.InterviewRound", b =>
                {
                    b.Property<int>("PkInterviewRoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_interview_round_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkInterviewRoundId"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("PkInterviewRoundId")
                        .HasName("PK__intervie__FF56A1D577728A50");

                    b.ToTable("interview_round", (string)null);
                });

            modelBuilder.Entity("Backend.Models.InterviewStatus", b =>
                {
                    b.Property<int>("PkInterviewStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_interview_status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkInterviewStatusId"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("PkInterviewStatusId")
                        .HasName("PK__intervie__247A960E45B6F140");

                    b.ToTable("interview_status", (string)null);
                });

            modelBuilder.Entity("Backend.Models.JobApplication", b =>
                {
                    b.Property<int>("PkJobApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_job_application_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkJobApplicationId"));

                    b.Property<int?>("FkCandidateId")
                        .HasColumnType("int")
                        .HasColumnName("fk_candidate_id");

                    b.Property<int?>("FkJobPositionId")
                        .HasColumnType("int")
                        .HasColumnName("fk_job_position_id");

                    b.Property<int?>("FkStatusId")
                        .HasColumnType("int")
                        .HasColumnName("fk_status_id");

                    b.HasKey("PkJobApplicationId")
                        .HasName("PK__job_appl__DB67DEC16367F743");

                    b.HasIndex("FkCandidateId");

                    b.HasIndex("FkJobPositionId");

                    b.HasIndex("FkStatusId");

                    b.ToTable("job_applications", (string)null);
                });

            modelBuilder.Entity("Backend.Models.JobPosition", b =>
                {
                    b.Property<int>("PkJobPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_job_position_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkJobPositionId"));

                    b.Property<string>("ClosureReason")
                        .HasColumnType("text")
                        .HasColumnName("closure_reason");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("FkReviewerId")
                        .HasColumnType("int")
                        .HasColumnName("fk_reviewer_id");

                    b.Property<int?>("FkSelectedCandidateId")
                        .HasColumnType("int")
                        .HasColumnName("fk_selected_candidate_id");

                    b.Property<int?>("FkStatusId")
                        .HasColumnType("int")
                        .HasColumnName("fk_status_id");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PkJobPositionId")
                        .HasName("PK__job_posi__839B68E8D3381D1A");

                    b.HasIndex("FkStatusId");

                    b.ToTable("job_position", (string)null);
                });

            modelBuilder.Entity("Backend.Models.JobSkill", b =>
                {
                    b.Property<int>("PkJobSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_job_skill_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkJobSkillId"));

                    b.Property<int?>("FkJobPositionId")
                        .HasColumnType("int")
                        .HasColumnName("fk_job_position_id");

                    b.Property<int?>("FkSkillId")
                        .HasColumnType("int")
                        .HasColumnName("fk_skill_id");

                    b.Property<bool?>("IsRequired")
                        .HasColumnType("bit")
                        .HasColumnName("is_required");

                    b.HasKey("PkJobSkillId")
                        .HasName("PK__job_skil__B60C9BF6D647915D");

                    b.HasIndex("FkJobPositionId");

                    b.HasIndex("FkSkillId");

                    b.ToTable("job_skill", (string)null);
                });

            modelBuilder.Entity("Backend.Models.JobStatus", b =>
                {
                    b.Property<int>("PkJobStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_job_status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkJobStatusId"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("PkJobStatusId")
                        .HasName("PK__job_stat__0C7DACDF736C5695");

                    b.ToTable("job_status", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Notification", b =>
                {
                    b.Property<int>("PkNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkNotificationId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("FkUserId")
                        .HasColumnType("int")
                        .HasColumnName("fk_user_id");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.HasKey("PkNotificationId")
                        .HasName("PK__notifica__E2D15614C8AC6AD6");

                    b.HasIndex("FkUserId");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Report", b =>
                {
                    b.Property<int>("PkReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_report_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkReportId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("FkGeneratedBy")
                        .HasColumnType("int")
                        .HasColumnName("fk_generated_by");

                    b.Property<int?>("FkReportTypeId")
                        .HasColumnType("int")
                        .HasColumnName("fk_report_type_id");

                    b.Property<string>("ReportData")
                        .HasColumnType("text")
                        .HasColumnName("report_data");

                    b.HasKey("PkReportId")
                        .HasName("PK__report__28BD8B5C92A88C60");

                    b.HasIndex("FkGeneratedBy");

                    b.HasIndex("FkReportTypeId");

                    b.ToTable("report", (string)null);
                });

            modelBuilder.Entity("Backend.Models.ReportType", b =>
                {
                    b.Property<int>("PkReportTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_report_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkReportTypeId"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("PkReportTypeId")
                        .HasName("PK__report_t__852F07E0D9CAB15F");

                    b.ToTable("report_type", (string)null);
                });

            modelBuilder.Entity("Backend.Models.ResumeReview", b =>
                {
                    b.Property<int>("PkResumeReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_resume_review_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkResumeReviewId"));

                    b.Property<string>("Comments")
                        .HasColumnType("text")
                        .HasColumnName("comments");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("FkCandidateId")
                        .HasColumnType("int")
                        .HasColumnName("fk_candidate_id");

                    b.Property<int?>("FkJobPositionId")
                        .HasColumnType("int")
                        .HasColumnName("fk_job_position_id");

                    b.HasKey("PkResumeReviewId")
                        .HasName("PK__resume_r__CA50FD1519F29FA9");

                    b.HasIndex("FkCandidateId");

                    b.HasIndex("FkJobPositionId");

                    b.ToTable("resume_review", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Role", b =>
                {
                    b.Property<int>("PkRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkRoleId"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("PkRoleId")
                        .HasName("PK__roles__12E769BBED1D1DA1");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Skill", b =>
                {
                    b.Property<int>("PkSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_skill_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkSkillId"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("PkSkillId")
                        .HasName("PK__skill__BE38287969434363");

                    b.ToTable("skill", (string)null);
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Property<int>("PkUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkUserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("full_name");

                    b.Property<DateOnly?>("JoiningDate")
                        .HasColumnType("date")
                        .HasColumnName("joining_date");

                    b.Property<DateOnly?>("LeavingDate")
                        .HasColumnType("date")
                        .HasColumnName("leaving_date");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("phone");

                    b.HasKey("PkUserId")
                        .HasName("PK__user__2F416313F3F7F9F4");

                    b.HasIndex(new[] { "Email" }, "UQ__user__AB6E6164410F3DC6")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Backend.Models.UserRole", b =>
                {
                    b.Property<int>("PkUserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pk_user_role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkUserRoleId"));

                    b.Property<int?>("FkCandidateId")
                        .HasColumnType("int");

                    b.Property<int?>("FkRoleId")
                        .HasColumnType("int")
                        .HasColumnName("fk_role_id");

                    b.Property<int?>("FkUserId")
                        .HasColumnType("int")
                        .HasColumnName("fk_user_id");

                    b.HasKey("PkUserRoleId")
                        .HasName("PK__user_rol__4BA152D8B279EAD4");

                    b.HasIndex("FkCandidateId");

                    b.HasIndex("FkRoleId");

                    b.HasIndex("FkUserId");

                    b.ToTable("user_role", (string)null);
                });

            modelBuilder.Entity("Backend.Models.CandidateSkill", b =>
                {
                    b.HasOne("Backend.Models.Candidate", "FkCandidate")
                        .WithMany("CandidateSkills")
                        .HasForeignKey("FkCandidateId")
                        .HasConstraintName("FK__candidate__fk_ca__3F466844");

                    b.HasOne("Backend.Models.Skill", "FkSkill")
                        .WithMany("CandidateSkills")
                        .HasForeignKey("FkSkillId")
                        .HasConstraintName("FK__candidate__fk_sk__403A8C7D");

                    b.Navigation("FkCandidate");

                    b.Navigation("FkSkill");
                });

            modelBuilder.Entity("Backend.Models.Document", b =>
                {
                    b.HasOne("Backend.Models.Candidate", "FkCandidate")
                        .WithMany("Documents")
                        .HasForeignKey("FkCandidateId")
                        .HasConstraintName("FK__document__fk_can__5629CD9C");

                    b.HasOne("Backend.Models.DocumentType", "FkDocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("FkDocumentTypeId")
                        .HasConstraintName("FK__document__fk_doc__571DF1D5");

                    b.HasOne("Backend.Models.DocumentStatus", "FkStatus")
                        .WithMany("Documents")
                        .HasForeignKey("FkStatusId")
                        .HasConstraintName("FK__document__fk_sta__5812160E");

                    b.Navigation("FkCandidate");

                    b.Navigation("FkDocumentType");

                    b.Navigation("FkStatus");
                });

            modelBuilder.Entity("Backend.Models.Interview", b =>
                {
                    b.HasOne("Backend.Models.Candidate", "FkCandidate")
                        .WithMany("Interviews")
                        .HasForeignKey("FkCandidateId")
                        .HasConstraintName("FK__interview__fk_ca__4BAC3F29");

                    b.HasOne("Backend.Models.InterviewRound", "FkInterviewRound")
                        .WithMany("Interviews")
                        .HasForeignKey("FkInterviewRoundId")
                        .HasConstraintName("FK__interview__fk_in__4D94879B");

                    b.HasOne("Backend.Models.JobPosition", "FkJobPosition")
                        .WithMany("Interviews")
                        .HasForeignKey("FkJobPositionId")
                        .HasConstraintName("FK__interview__fk_jo__4CA06362");

                    b.HasOne("Backend.Models.InterviewStatus", "FkStatus")
                        .WithMany("Interviews")
                        .HasForeignKey("FkStatusId")
                        .HasConstraintName("FK__interview__fk_st__4E88ABD4");

                    b.Navigation("FkCandidate");

                    b.Navigation("FkInterviewRound");

                    b.Navigation("FkJobPosition");

                    b.Navigation("FkStatus");
                });

            modelBuilder.Entity("Backend.Models.InterviewFeedback", b =>
                {
                    b.HasOne("Backend.Models.Interview", "FkInterview")
                        .WithMany("InterviewFeedbacks")
                        .HasForeignKey("FkInterviewId")
                        .HasConstraintName("FK__interview__fk_in__68487DD7");

                    b.HasOne("Backend.Models.User", "FkInterviewer")
                        .WithMany("InterviewFeedbacks")
                        .HasForeignKey("FkInterviewerId")
                        .HasConstraintName("FK__interview__fk_in__693CA210");

                    b.Navigation("FkInterview");

                    b.Navigation("FkInterviewer");
                });

            modelBuilder.Entity("Backend.Models.InterviewPanel", b =>
                {
                    b.HasOne("Backend.Models.Interview", "FkInterview")
                        .WithMany("InterviewPanels")
                        .HasForeignKey("FkInterviewId")
                        .HasConstraintName("FK__interview__fk_in__6477ECF3");

                    b.HasOne("Backend.Models.User", "FkInterviewer")
                        .WithMany("InterviewPanels")
                        .HasForeignKey("FkInterviewerId")
                        .HasConstraintName("FK__interview__fk_in__656C112C");

                    b.Navigation("FkInterview");

                    b.Navigation("FkInterviewer");
                });

            modelBuilder.Entity("Backend.Models.JobApplication", b =>
                {
                    b.HasOne("Backend.Models.Candidate", "FkCandidate")
                        .WithMany("JobApplications")
                        .HasForeignKey("FkCandidateId")
                        .HasConstraintName("FK__job_appli__fk_ca__3B75D760");

                    b.HasOne("Backend.Models.JobPosition", "FkJobPosition")
                        .WithMany("JobApplications")
                        .HasForeignKey("FkJobPositionId")
                        .HasConstraintName("FK__job_appli__fk_jo__3A81B327");

                    b.HasOne("Backend.Models.ApplicationStatus", "FkStatus")
                        .WithMany("JobApplications")
                        .HasForeignKey("FkStatusId")
                        .HasConstraintName("FK__job_appli__fk_st__3C69FB99");

                    b.Navigation("FkCandidate");

                    b.Navigation("FkJobPosition");

                    b.Navigation("FkStatus");
                });

            modelBuilder.Entity("Backend.Models.JobPosition", b =>
                {
                    b.HasOne("Backend.Models.JobStatus", "FkStatus")
                        .WithMany("JobPositions")
                        .HasForeignKey("FkStatusId")
                        .HasConstraintName("FK__job_posit__fk_st__267ABA7A");

                    b.Navigation("FkStatus");
                });

            modelBuilder.Entity("Backend.Models.JobSkill", b =>
                {
                    b.HasOne("Backend.Models.JobPosition", "FkJobPosition")
                        .WithMany("JobSkills")
                        .HasForeignKey("FkJobPositionId")
                        .HasConstraintName("FK__job_skill__fk_jo__2D27B809");

                    b.HasOne("Backend.Models.Skill", "FkSkill")
                        .WithMany("JobSkills")
                        .HasForeignKey("FkSkillId")
                        .HasConstraintName("FK__job_skill__fk_sk__2E1BDC42");

                    b.Navigation("FkJobPosition");

                    b.Navigation("FkSkill");
                });

            modelBuilder.Entity("Backend.Models.Notification", b =>
                {
                    b.HasOne("Backend.Models.User", "FkUser")
                        .WithMany("Notifications")
                        .HasForeignKey("FkUserId")
                        .HasConstraintName("FK__notificat__fk_us__6D0D32F4");

                    b.Navigation("FkUser");
                });

            modelBuilder.Entity("Backend.Models.Report", b =>
                {
                    b.HasOne("Backend.Models.User", "FkGeneratedByNavigation")
                        .WithMany("Reports")
                        .HasForeignKey("FkGeneratedBy")
                        .HasConstraintName("FK__report__fk_gener__73BA3083");

                    b.HasOne("Backend.Models.ReportType", "FkReportType")
                        .WithMany("Reports")
                        .HasForeignKey("FkReportTypeId")
                        .HasConstraintName("FK__report__fk_repor__72C60C4A");

                    b.Navigation("FkGeneratedByNavigation");

                    b.Navigation("FkReportType");
                });

            modelBuilder.Entity("Backend.Models.ResumeReview", b =>
                {
                    b.HasOne("Backend.Models.Candidate", "FkCandidate")
                        .WithMany("ResumeReviews")
                        .HasForeignKey("FkCandidateId")
                        .HasConstraintName("FK__resume_re__fk_ca__4316F928");

                    b.HasOne("Backend.Models.JobPosition", "FkJobPosition")
                        .WithMany("ResumeReviews")
                        .HasForeignKey("FkJobPositionId")
                        .HasConstraintName("FK__resume_re__fk_jo__440B1D61");

                    b.Navigation("FkCandidate");

                    b.Navigation("FkJobPosition");
                });

            modelBuilder.Entity("Backend.Models.UserRole", b =>
                {
                    b.HasOne("Backend.Models.Candidate", "FkCandidate")
                        .WithMany("UserRoles")
                        .HasForeignKey("FkCandidateId");

                    b.HasOne("Backend.Models.Role", "FkRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("FkRoleId")
                        .HasConstraintName("FK__user_role__fk_ro__619B8048");

                    b.HasOne("Backend.Models.User", "FkUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("FkUserId")
                        .HasConstraintName("FK__user_role__fk_us__60A75C0F");

                    b.Navigation("FkCandidate");

                    b.Navigation("FkRole");

                    b.Navigation("FkUser");
                });

            modelBuilder.Entity("Backend.Models.ApplicationStatus", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("Backend.Models.Candidate", b =>
                {
                    b.Navigation("CandidateSkills");

                    b.Navigation("Documents");

                    b.Navigation("Interviews");

                    b.Navigation("JobApplications");

                    b.Navigation("ResumeReviews");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Backend.Models.DocumentStatus", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Backend.Models.DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Backend.Models.Interview", b =>
                {
                    b.Navigation("InterviewFeedbacks");

                    b.Navigation("InterviewPanels");
                });

            modelBuilder.Entity("Backend.Models.InterviewRound", b =>
                {
                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("Backend.Models.InterviewStatus", b =>
                {
                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("Backend.Models.JobPosition", b =>
                {
                    b.Navigation("Interviews");

                    b.Navigation("JobApplications");

                    b.Navigation("JobSkills");

                    b.Navigation("ResumeReviews");
                });

            modelBuilder.Entity("Backend.Models.JobStatus", b =>
                {
                    b.Navigation("JobPositions");
                });

            modelBuilder.Entity("Backend.Models.ReportType", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Backend.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Backend.Models.Skill", b =>
                {
                    b.Navigation("CandidateSkills");

                    b.Navigation("JobSkills");
                });

            modelBuilder.Entity("Backend.Models.User", b =>
                {
                    b.Navigation("InterviewFeedbacks");

                    b.Navigation("InterviewPanels");

                    b.Navigation("Notifications");

                    b.Navigation("Reports");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
